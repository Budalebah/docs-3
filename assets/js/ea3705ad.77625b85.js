"use strict";(self.webpackChunkrives_docs=self.webpackChunkrives_docs||[]).push([[1665],{4852:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var t=r(4848),i=r(8453);const a={sidebar_position:1},s="Drawing basics",o={id:"riv/guides/drawing-basics",title:"Drawing basics",description:"This guide will explain about the color palette, the framebuffer,",source:"@site/docs/riv/guides/drawing-basics.md",sourceDirName:"riv/guides",slug:"/riv/guides/drawing-basics",permalink:"/docs/riv/guides/drawing-basics",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Guides",permalink:"/docs/category/guides"},next:{title:"Handling inputs",permalink:"/docs/riv/guides/handling-inputs"}},l={},c=[{value:"The color palette",id:"the-color-palette",level:2},{value:"Modifying the palette",id:"modifying-the-palette",level:3},{value:"The framebuffer",id:"the-framebuffer",level:2},{value:"Customizing the framebuffer",id:"customizing-the-framebuffer",level:3},{value:"Direct framebuffer access",id:"direct-framebuffer-access",level:3},{value:"Drawing shapes",id:"drawing-shapes",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"drawing-basics",children:"Drawing basics"}),"\n",(0,t.jsxs)(n.p,{children:["This guide will explain about the color ",(0,t.jsx)(n.em,{children:"palette"}),", the ",(0,t.jsx)(n.em,{children:"framebuffer"}),",\nprovide explanations on how to manipulate them and draw basic shapes.\nSome piece of C code will be shown and you can paste and try them manually with ",(0,t.jsx)(n.em,{children:"rivemu"}),"\nor at the ",(0,t.jsx)(n.a,{href:"/playground",children:"playground"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"the-color-palette",children:"The color palette"}),"\n",(0,t.jsxs)(n.p,{children:["RIV can display up to 256 colors on screen per frame.\nThe color ",(0,t.jsx)(n.em,{children:"palette"})," is stored in memory in the ",(0,t.jsx)(n.code,{children:"riv->palette"})," field\nas 32-bit RGB values and can be changed at any time."]}),"\n",(0,t.jsx)(n.p,{children:"By default the palette comes with 32 predefined with colors\nof high contrast, range, and saturation.\nThe default color palette was chosen to suits most use case\nof pixel art games, but can be customized.\nYou can visualize the default color palette in the following:"}),"\n",(0,t.jsx)("div",{align:"center",children:(0,t.jsx)("iframe",{src:"https://localhost:39611/?-no-audio&-stop-frame=1#nocontrols=true&autoplay=true&cartridge=cartridges/palette.sqfs",allowFullScreen:!0,className:"rivemu-compact-frame"})}),"\n",(0,t.jsx)(n.p,{children:"The remaining colors from 32-255 are defined as black (#000000) and you can customize it freely.\nAs a recommended guideline, the color 0 should be defined as the darkest black and color 1 to be brightest white."}),"\n",(0,t.jsx)(n.h3,{id:"modifying-the-palette",children:"Modifying the palette"}),"\n",(0,t.jsxs)(n.p,{children:["You can modify or append new colors in the color palette by setting ",(0,t.jsx)(n.code,{children:"riv->palette"})," directly, for example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"//riv-jit-c\n#include <riv.h>\nint main() {\n    riv->palette[32] = 0xff0000; // set color 32 to blue (actually #0000ff in HTML color code convention)\n    riv_clear(32); // clear the framebuffer with the blue color\n    riv_present(); // present the framebuffer to the screen only once\n    return 0;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Notice we have to swap byte order relative to standard HTML color codes (e.g #123456 becomes 0x563412),\nbecause RIV stores the color table in the optimal memory model format for rendering."}),"\n",(0,t.jsx)(n.h2,{id:"the-framebuffer",children:"The framebuffer"}),"\n",(0,t.jsxs)(n.p,{children:["RIV has a ",(0,t.jsx)(n.em,{children:"framebuffer"})," that can store up to 2MB pixels and can refresh up to 60 times per second,\nwhere each pixel is a byte that indexes a color in the ",(0,t.jsx)(n.em,{children:"palette"}),".\nThe framebuffer is stored in memory in the ",(0,t.jsx)(n.code,{children:"riv->framebuffer"})," field,\nand can be viewed and accessed at any moment.\nThe framebuffer is flushed to screen every ",(0,t.jsx)(n.code,{children:"riv_present()"})," call,\nThe framebuffer can be cleared at moment with ",(0,t.jsx)(n.code,{children:"riv_clear(col)"})," call.\nand the data stored in it persists across its calls.\nThe framebuffer initializes filled with zeros, meaning it's initialized to black color from the palette.\nBy default the framebuffer size is 256x256 and is updated 60 times per second,\nbut can be changed at any moment."]}),"\n",(0,t.jsx)(n.h3,{id:"customizing-the-framebuffer",children:"Customizing the framebuffer"}),"\n",(0,t.jsxs)(n.p,{children:["You can modify the framebuffer default size and target refresh rate by setting\n",(0,t.jsx)(n.code,{children:"riv->width"}),", ",(0,t.jsx)(n.code,{children:"riv->height"})," and ",(0,t.jsx)(n.code,{children:"riv->target_fps"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"direct-framebuffer-access",children:"Direct framebuffer access"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"riv->framebuffer"})," can be accessed to draw directly in the framebuffer,\nfor example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"//riv-jit-c\n#include <riv.h>\nint main() {\n    riv->width = 128;\n    riv->height = 128;\n    int x = 64, y = 32; // pixel position\n    riv->framebuffer[riv->width*y + x] = 1; // set pixel to white\n    riv_present(); // present the framebuffer to the screen only once\n    return 0;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Although you can draw almost anything this way,\nRIV has a high level API to make easy to draw many shapes,\ndrawing directly in the framebuffer makes only sense when you want to do\nsome advanced graphic effects, for example:"}),"\n",(0,t.jsx)("div",{align:"center",children:(0,t.jsx)("iframe",{src:"https://localhost:39611/?-no-audio&-stop-frame=300#cartridge=cartridges/lines.sqfs",allowFullScreen:!0,className:"rivemu-frame"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"//riv-jit-c\n#include <riv.h>\nint main() {\n  do {\n    uint64_t frame = riv->frame; // frame counter, incremented at every frame\n    uint8_t *framebuffer = riv->framebuffer; // array to the frame buffer\n    // animate diagonal lines filled with the color palette\n    for(uint64_t y = 0; y < 256; y++) {\n      for(uint64_t x = 0; x < 256; x++) {\n        framebuffer[((y * 256) + x)] = ((((frame + x) + y) / 8) % 32);\n      }\n    }\n  } while(riv_present()); // keep presenting the framebuffer to the screen\n  return 0;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can notice in the above code that we assign every pixel in the framebuffer to an index\nfrom the color palette. All the RIV drawing shaping functions are implemented this way."}),"\n",(0,t.jsx)(n.h2,{id:"drawing-shapes",children:"Drawing shapes"}),"\n",(0,t.jsx)(n.p,{children:"Although you can draw in the framebuffer directly,\nthis would be very tedious for drawing simple stuff like rectangles, triangles, text and sprites.\nTo make easy to draw stuff on the screen, RIV comes with an opinionated high level drawing API."}),"\n",(0,t.jsx)(n.p,{children:"For example you can draw a rectangle with:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"//riv-jit-c\n#include <riv.h>\nint main() {\n    riv_draw_rect_fill(64, 64, 128, 128, 1);  // draw a white rectangle in the framebuffer center\n    riv_present(); // present the framebuffer to the screen only once\n    return 0;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"And here a demonstration of all shapes RIV high level API can draw:"}),"\n",(0,t.jsx)("div",{align:"center",children:(0,t.jsx)("iframe",{src:"https://localhost:39611/?-no-audio#cartridge=cartridges/shapes.sqfs",allowFullScreen:!0,className:"rivemu-frame"})}),"\n",(0,t.jsxs)(n.p,{children:["You can view the code for this example at\n",(0,t.jsx)(n.a,{href:"https://github.com/rives-io/riv/blob/main/demos/tools/shapes.c",children:"shapes.c"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var t=r(6540);const i={},a=t.createContext(i);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);